{"version":3,"sources":["logo.svg","components/scroll-arrow/ScrollArray.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ScrollArray","color","class","App","className","data-aos","data-aos-once","style","minHeight","data-aos-delay","title","backgroundColor","icon","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4IAAAA,EAAOC,QAAU,IAA0B,kC,qJCI5B,SAASC,EAAT,GAAgC,EAATC,MAOlC,OACI,yBAAKC,MAAM,aACP,yBAAKA,MAAM,YACX,yBAAKA,MAAM,YACX,yBAAKA,MAAM,aC4CRC,MArDf,WAgCE,OACC,yBAAKC,UAAU,2DACb,uBACGC,WAAS,aACTC,gBAAc,OACdF,UAAU,8BAHb,QAjCU,WAsCX,yBAAKG,MAAO,CAACC,UAAW,WACpB,kBAACR,EAAD,OArCJ,kBAAC,WAAD,KACI,yBAAKI,UAAU,wBACX,uBAAGC,WAAS,UAAUI,iBAAe,OAArC,cACA,6BACA,6BACA,uBAAGJ,WAAS,UAAUI,iBAAe,OAArC,eACA,6BACA,6BACA,uBAAGJ,WAAS,WAAZ,kBACA,6BACA,6BACA,uBAAGA,WAAS,WAAZ,6BAEJ,yBAAKD,UAAU,cACX,uBAAGC,WAAS,WAAZ,cACA,6BACA,6BACA,uBAAGA,WAAS,WAAZ,sBACA,6BACA,6BACA,yBAAKE,MAAO,CAACC,UAAW,WACpB,kBAACR,EAAD,CACIC,MAAM,aAkBtB,kBAAC,IAAD,CACIS,MAAM,4GACNT,MAAM,QACNU,gBAAgB,UAChBC,KAAK,8DCzCPC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,oBAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,oBAAN,sBAEP/B,IAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BV,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCtC/BE,K","file":"static/js/main.27fdd7f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// reference: https://codepen.io/JakubHonisek/pen/qjpeeO\r\nimport React from 'react';\r\nimport './style.scss';\r\n\r\nexport default function ScrollArray({ color }) {\r\n    // const styles = { // NOT WORKING. Need alter chevron:after backgroud...\r\n    //     array: {\r\n    //         background: color || \"black\",\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <div class=\"container\">\r\n            <div class=\"chevron\"></div>\r\n            <div class=\"chevron\"></div>\r\n            <div class=\"chevron\"></div>\r\n        </div>\r\n    );\r\n}","import React, { Fragment } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport JwtInstaller from 'react-pwa-installer';\nimport ScrollArray from './components/scroll-arrow/ScrollArray';\n\nfunction App() {\n  const name = \"Visitor\";\n  const showMainText = () => (\n    <Fragment>\n        <div className=\"text-rem-4 main-text\">\n            <p data-aos=\"fade-up\" data-aos-delay=\"150\">Are you...</p>\n            <br/>\n            <br/>\n            <p data-aos=\"fade-up\" data-aos-delay=\"150\">...ready to</p>\n            <br/>\n            <br/>\n            <p data-aos=\"fade-up\">...download...</p>\n            <br/>\n            <br/>\n            <p data-aos=\"fade-up\">...your awesome PWA app?</p>\n        </div>\n        <div className=\"text-rem-4\">\n            <p data-aos=\"zoom-in\">BUCKLE UP!</p>\n            <br/>\n            <br/>\n            <p data-aos=\"zoom-in\">Here we go then...</p>\n            <br/>\n            <br/>\n            <div style={{minHeight: '70vmin'}}>\n                <ScrollArray\n                    color=\"white\"\n                />\n            </div>\n        </div>\n    </Fragment>\n  );\n\n  return (\n   <div className=\"App text-white font-weight-bold text-center text-shadow\">\n     <p\n        data-aos=\"zoom-in-up\"\n        data-aos-once=\"true\"\n        className=\"text-rem-5 text-longshadow\">Hey, {name}\n    </p>\n    <div style={{minHeight: '70vmin'}}>\n        <ScrollArray />\n    </div>\n    {showMainText()}\n    <JwtInstaller\n        title=\"<strong>Download your awesome app here</strong><br />and have a faster and awesome<br />access experience\"\n        color=\"white\"\n        backgroundColor=\"#22a6b3\" // light blue\n        icon=\"https://image.flaticon.com/icons/png/512/223/223203.png\"\n    />\n   </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want\n// your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}